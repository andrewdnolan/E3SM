#!/usr/bin/env python

"""
build ww3 library
"""
import sys, os, shutil

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.buildlib import parse_input
from CIME.case import Case
from CIME.build import get_standard_cmake_args
from CIME.utils import run_bld_cmd_ensure_logging

logger = logging.getLogger(__name__)

###############################################################################
def buildlib(bldroot, installpath, case):
###############################################################################
    caseroot  = case.get_value("CASEROOT")
    casebuild = case.get_value("CASEBUILD")
    srcroot   = case.get_value("SRCROOT")
    exeroot   = case.get_value("EXEROOT")
    gmake_j   = case.get_value("GMAKE_J")
    gmake     = case.get_value("GMAKE")
    mpilib    = case.get_value("MPILIB")

    # Define WW3 repository directories
    builddir = f"{exeroot}/wav"
    tmpdir = f"{builddir}/tmp"
    repodir = f"{srcroot}/components/ww3/src/WW3"

    libdir = os.path.join(bldroot, "wav")
    if not os.path.isdir(libdir):
        os.makedirs(libdir)

    cmake_flags = get_standard_cmake_args(case, installpath)
    cmake_flags += f" -DCOMP_NAME=wav"
    cmake_flags += f" -DWAV_DIR={repodir}"
    cmake_flags += f" -DMPILIB={mpilib} "
    cmake_flags += f" -DSWITCH=E3SM "
    cmake_flags += f" -DCMAKE_INSTALL_PREFIX={installpath}"
    cmake_flags += f" {repodir}"

    logger.info(f"Running in dir {libdir}")
    run_bld_cmd_ensure_logging(f"cmake {cmake_flags} ", logger, from_dir=libdir)
    run_bld_cmd_ensure_logging(f"{gmake} -j {gmake_j} ", logger, from_dir=libdir)
    run_bld_cmd_ensure_logging(f"{gmake} install ", logger, from_dir=libdir)

    with open(os.path.join(casebuild, "ww3conf", "Filepath"), "w") as fd:
        fd.write(
"""{}/SourceMods/src.ww3
{}
{}/components/ww3/src/cpl
""".format(caseroot, tmpdir, srcroot))
###############################################################################
def _main_func():
###############################################################################
    caseroot, libroot, bldroot = parse_input(sys.argv)
    with Case(caseroot, read_only=False) as case:
        buildlib(bldroot, libroot, case)

###############################################################################

if __name__ == "__main__":
    _main_func()
